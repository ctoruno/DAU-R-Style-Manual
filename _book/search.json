[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "WJP - R Coding Handbook",
    "section": "",
    "text": "Zacatal by nicaraguan painter Raúl Marín"
  },
  {
    "objectID": "index.html#prerequisites",
    "href": "index.html#prerequisites",
    "title": "WJP - R Coding Handbook",
    "section": "Prerequisites",
    "text": "Prerequisites\nIn order to assimilate the content in this chapter (and the entire handbook) we will require you to have the following:\n\nAn intermediate knowledge of R language.\nR Studio is installed in your computer, however, you are free to use any other Integrated Development Environment (IDE) or the Text Editor of your choice.\nA basic knowledge of Git.\nA GitHub account.\nAccess to the DAU’s SharePoint\nAlthough is not required, we strongly advise you to install GitHub Desktop.\n\nIf you are new to R, I would recommend you to check the Hands-On Programming with R book written by Garrett Grolemund. If you are already comfortable with the R programming language but you need an introduction on how to analyze data using it, I would suggest you to read the R for Data Science book edited by the R4DS team."
  },
  {
    "objectID": "index.html#handbook-structure",
    "href": "index.html#handbook-structure",
    "title": "WJP - R Coding Handbook",
    "section": "Handbook Structure",
    "text": "Handbook Structure\nThe content in this Handbook is organized as follows:\n\nPart I: Workflow: A brief chapter in which we will cover the basic guidelines and issues related to the DAU workflow when programming with R and R Studio along with the basic setup.\nPart II: Coding: The main chapter of the handbook where we discuss the main aspects of the coding style when working in projects related to the DAU.\nPart III: Viz Aesthetics: Manual of style, style guidelines, pre-defined settings and other aspects related exclusively to data visualization are presented in this chapter.\nAppendix: Final part of the handbook where you can read about R-related content for the daily tasks that you will have to face as a member of the DAU."
  },
  {
    "objectID": "index.html#licence",
    "href": "index.html#licence",
    "title": "WJP - R Coding Handbook",
    "section": "Licence",
    "text": "Licence\nThis website is free to use and it is licensed under the Creative Commons Attribution-NonCommercial-NoDerivs 4.0 License. Physical copies of this book are not currently available. If you are not a member of the DAU team, feel free to report typos, request information or even contribute by commenting or leaving a pull request at ctoruno/DAU-R-Style-Manual.\nTo learn more about the work of The World Justice Project, please visit the official website."
  },
  {
    "objectID": "workflow.html",
    "href": "workflow.html",
    "title": "1  Workflow",
    "section": "",
    "text": "In this chapter, we will cover the basic guidelines and issues related to the prefered workflow when programming with R programming language. This chapter will cover four different aspects: a) Cloud Storage, b) Version Control System, c) R Studio Projects, and d) File Management practices."
  },
  {
    "objectID": "workflow.html#sharepoint",
    "href": "workflow.html#sharepoint",
    "title": "1  Workflow",
    "section": "1.1 SharePoint",
    "text": "1.1 SharePoint\nAll files used by the DAU are stored in the Data Analytics folder within the organization’s SharePoint. This is done in order to provide an easy access to all members of the team. As a rule, you are required to work and modify these files directly from this online directory. To achieve this, you will need to download the OneDrive app in your computer and sign in using your WJP account. If you are already using One Drive with your personal account, you can add an additional professional account which will function parallel to your personal account in your computer. For more information, see the following website.\nGiven that the DAU SharePoint is a directory created and administered by the organization, you will have to sync this directory to your own OneDrive WJP Account. In order to achieve this, follow these steps:\n\nLogin into your WJP Outlook account in any web browser.\nOnce into your account, access OneDrive. This will open a new tab for you.\nIn the left side panel, locate the Share with Metab and click it.\nLocate the Data Analytics folder.\nOnce that you are inside the folder, you will see the Add Shortcut to My Files,or, Sync Up option in the upper toolbar, depending on your OneDrive version.\nFollow the instructions and sync it to your WJP folder in your computer.\n\n\n\n\n\n\nBy syncing your work with the SharePoint, the whole team is going to be able to see and review changes as they go. However, if more than one person is working on the same file at the same time, it is likely that this working flow will produce several mistakes. Therefore, additionally to this shared cloud storage system, we need a version control tool that will allow us to modify and collaborate in team projects without these kind of issues. Given that most of our work is focused in coding, we use Git Version Control and the GitHub platform for this."
  },
  {
    "objectID": "workflow.html#git",
    "href": "workflow.html#git",
    "title": "1  Workflow",
    "section": "1.2 Git",
    "text": "1.2 Git\nGit is a free and open source software that allows users to set up a version control system designed to handle projects. Given the nature of its features, it is normally used for collaboratively developing code and data integrity. GitHub is a website and cloud-based service that helps developers store and manage their code, as well as track and control changes to their code. For a gentle introduction to Git and GitHub, see the following post published by Kinsta. For a more in depth introduction, please refer to the GitHub documentation.\n<iframe width=“560” height=“315” src=“https://www.youtube.com/embed/RGOj5yH7evk” title=“YouTube video player” frameborder=“0” allow=“accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture” allowfullscreen></iframe>\nUsing the Git features allow us to simultaneously work on the same project and even in the same code without worrying about interfering with other members of the team. As a rule, every project carried by the DAU has a code administrator who is in charge of setting up the GitHub repository and add other members of the team as project collaborators. Additionally, the code administrator is in charge of setting the main branch and the initial structure of the code (see the (data-management?) section on this chapter). It is required that the GitHub repository have its main branch in its respective SharePoint folder.\nNote: It is highly recommended to create the repository from GitHub.com and not from the local machine to avoid the initial commit that can include system files such as .DS_STORE files\nWe use convergence development1 to collaboratively code in the same project. For this, it is highly recommended that each team member works on a separate branch and, once the data routine is done, the auxiliary branches can be merged into the main branch of the repository. Collaborators that are not the code administrator have the option to clone the GitHub repository in their computer in a local directory that it is not sync to the SharePoint and work in their respective branch from a local copy outside the SharePoint. In other words, it is only the functional final version contained inside the main branch the one that it is going to be sync in SharePoint.\nImportant: GitHub is used to keep track of the code we use in each project. Under no circumstance, we will include the data sources in the online repositories."
  },
  {
    "objectID": "workflow.html#projects",
    "href": "workflow.html#projects",
    "title": "1  Workflow",
    "section": "1.3 Projects",
    "text": "1.3 Projects\nWhen you load a data set or source an R script, you will have to set up the working directory where these files are located in your computer. However, the path to this working directory is quite different for all the members of the team. R Studio allow us to enclose all of our analysis, code and auxiliary files into a project.\nA project is a feature that allow us to work with the analysis we are carrying without having to worry about where does these files are stored or who is working on them. Say goodbye to setwd(\"...\"). Besides managing relatives paths, R projects allow users to keep a history of actions performed and even keep the objects in your environment. Because of this, projects are the cornerstone of our work when performing analysis with R.\nAs a rule, every project has a file named project-name.Rproj in its root directory and open it should be the first action when working on a project. For more information on working with R projects, refer to the Workflow section from the R for Data Science book."
  },
  {
    "objectID": "workflow.html#data-management",
    "href": "workflow.html#data-management",
    "title": "1  Workflow",
    "section": "1.4 Data Management",
    "text": "1.4 Data Management\nThe University of California San Diego (UC San Diego) has a Data Management Best Practices that reviews common guidelines for managing research data. In this handbook, I will focus on two topics mentioned by those guidelines: File Organization and Documentation.\n\n1.4.1 File Organization\nThe file organization involves two important elements: filing system and naming conventions.\nA filing system is basically the organization structure (directories, folders, sub-folders, etc) in which files are stored. There are no standard rules about how this should be done. However, the chosen filing system needs to make sense not only to the person currently working on a given project but to anyone going through these files in the future. As a rule, each project would have the following sub-folders:\n\nCode: Depending on the complexity of the project, you could choose to create separate directories within the Code folder for Stata, R or Python files.\nData: Depending on the complexity and nature of the project, you could choose to create separate directories within the Data folder for RAW, INTERMEDIATE or CLEAN data sets.\nOutcomes: The outcomes of the project might have several different formats. For example, images could be in PNG and/or SVG format, Reports might be created in PDF, some tables might be exported as TEX files, etc. The outcomes folder should have a separate directory for each one of these formats.\n\nIn some cases, the creation of a PDF report is key, for example, the Regional Country Reports. For these projects, we strongly advise to create a separate directory to store the code files used for the report. At the moment of writing this handbook, these reports are created using R Markdown, but a migration to Quarto is feasible in the future.\n\nMarkdown/Quarto\n\nIn relation to the naming conventions, these are a set of rules designed to complement the filing system and help collaborators in understanding the data organization. Each project have the flexibility to use a specific set of naming rules to use in the filing system. However, there are a few general rules to note:\n\nUse descriptive file names that are meaningful to you and your colleagues while also keeping them short.\nAvoid using spaces and make use of hyphens, snake_case, and/or camelCase.\nAvoid special characters such as $, #, ^, & in the file names.\nBe consistent not only along the project but also across different projects. If all different data files and routines are named in the same way, it’s easier for you to use those tools across projects and re-factor routines.\n\n\n\n1.4.2 Documentation\nWhen initializing the GitHub repository, we strongly suggest to include a README file with it. Such file should be a Markdown document including the following elements:\n\nA brief description of the project and the role of the DAU in it.\nReferred person contact, which should the project leader and the code administrator.\nA brief description of the filing system along with what to find in each sub-directory.\nGiven that no data is uploaded into the online repositories, include the following descriptions:\n\nData needed to run the code: source and process to obtain it.\nLocation of the data in the SharePoint.\n\nA brief description on how to read the code with, if possible, visual aids.\n\nFor an example on one of these files, please check the following README file. If possible, use this example as a template for future projects."
  },
  {
    "objectID": "coding.html",
    "href": "coding.html",
    "title": "2  Coding",
    "section": "",
    "text": "In this chapter, we will cover some basic guidelines and styling rules related to how the coding is done at the DAU-WJP. When programming data analysis routines, it is very hard to vanquish the personal style the every person has. Therefore, this chapter is focused on giving general guidelines that will allow to standardize their codes for an easy collaboration among all team members.\nRemember, when writing a code, you are just the author not the audience. Therefore, think on how would other people understand what you are writing without the ideas and knowledge you have at the moment of creating your code. Writing comments, using titles as step-by-step guides, documenting the issues, all of these actions will greatly help other team members to understand what you have done and why you have done it. Also, this will also help you in the future to understand what you did in the past and reduce the level of dependency of a given project to the referring people."
  },
  {
    "objectID": "coding.html#script-headline-and-outline",
    "href": "coding.html#script-headline-and-outline",
    "title": "2  Coding",
    "section": "2.1 Script Headline and Outline",
    "text": "2.1 Script Headline and Outline\nThe headline is very important because it gives the general information about the script, its purposes, the authors, the version and last modification date, among others. Within the DAU, we have the following template:\n## ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n##\n## Script:            PROJECT NAME - Script Purpose\n##\n## Author:            Author 1 Name   (email)\n##                    Author 2 Name   (email)\n##\n## Creation date:     Month Day, Year\n##\n## This version:      Month Day, Year\n##\n## ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\nAs you can see, the template highlights the most important information that we need to know when opening a script, even when we are new to it. However, this is just a first step in the process. Our template goes beyond and it also displays how to use Titles, Subtitles and Steps within the script:\n## ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n##\n#                1.  TITLE                                                                               ----\n##\n## ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\n\n## 1.1 SUBTITLE  ============================================================================================\n\n# Step 1\n\n# Step 2\n\n## 1.2 SUBTITLE  ============================================================================================\n\n# Step 1\n\n# Step 2\nThe main objective of this style is to provide an organized outline for the script."
  }
]